{"version":3,"sources":["api.ts","components/Loader/Loader.tsx","utils/consts.ts","components/PersonLink/PersonLink.tsx","components/PeopleTable/PersonRow.tsx","types/SortParam.ts","utils/searchHelper.ts","components/SearchLink.tsx","components/SortLink/SortLink.tsx","components/PeopleTable/PeopleTable.tsx","types/SearchParam.ts","components/PeopleFilters.tsx","components/pages/PeoplePage/PeoplePage.tsx","components/Navbar.tsx","components/pages/HomePage/HomePage.tsx","components/pages/NotFoundPage/NotFoundPage.tsx","App.tsx","index.tsx"],"names":["API_URL","wait","delay","Promise","resolve","setTimeout","then","fetch","response","json","Loader","className","CENTURY_MAP","PersonLink","person","to","slug","replace","classNames","sex","name","PersonRow","selectedPersonId","born","died","mother","motherName","father","fatherName","SortParam","getSearchWith","currentParams","paramsToUpdate","newParams","URLSearchParams","toString","Object","entries","forEach","key","value","delete","Array","isArray","part","append","set","SearchLink","children","params","props","useSearchParams","searchParams","search","SortLink","sortType","isReversed","get","sortField","NoSort","isSortAsc","isSortDesc","isUnsorted","order","sort","PeopleTable","people","useParams","personId","Name","Sex","Born","Died","map","SearchParam","PeopleFilters","useState","query","setQuery","setSearchParams","centuries","getAll","Centuries","useEffect","Query","type","placeholder","defaultValue","onChange","event","target","handleQueryChange","century","currentCentury","isCenturyIncluded","includes","updatedCenturies","filter","cent","onClick","PeoplePage","setPeople","isLoading","setIsLoading","isError","setIsError","Sort","Order","getPeople","peopleFromServer","find","preparePeople","catch","finally","visiblePeople","filteredPeople","length","personCentury","Math","ceil","lowerQuery","toLowerCase","join","person1","person2","localeCompare","reverse","filterPeople","isDisplayError","isNoPeopleFromServer","isPeopleFromServer","Navbar","role","isActive","HomePage","NotFoundPage","App","path","element","createRoot","document","getElementById","render"],"mappings":"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","file":"static/js/main.4426ffbe.chunk.js","sourcesContent":["import { Person } from './types/Person';\n\n// eslint-disable-next-line max-len\nconst API_URL = 'https://mate-academy.github.io/react_people-table/api/people.json';\n\nfunction wait(delay: number) {\n  return new Promise(resolve => setTimeout(resolve, delay));\n}\n\nexport async function getPeople(): Promise<Person[]> {\n  // keep this delay for testing purpose\n  return wait(500)\n    .then(() => fetch(API_URL))\n    .then(response => response.json());\n}\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","export const FEMALE = 'f';\nexport const MALE = 'm';\nexport const EMPTY = '-';\n\nexport const CENTURY_MAP = [16, 17, 18, 19, 20];\n","import classNames from 'classnames';\nimport { Link } from 'react-router-dom';\nimport { Person } from '../../types';\nimport { FEMALE, MALE } from '../../utils/consts';\n\ninterface Props {\n  person: Person\n}\n\nexport const PersonLink: React.FC<Props> = ({ person }) => (\n  <Link\n    to={`${person.slug}`}\n    replace\n    className={classNames({\n      'has-text-danger': person.sex === FEMALE,\n      'has-text-link': person.sex === MALE,\n    })}\n  >\n    {person.name}\n  </Link>\n);\n","import classNames from 'classnames';\nimport { Person } from '../../types';\nimport { PersonLink } from '../PersonLink/PersonLink';\nimport { EMPTY } from '../../utils/consts';\n\ninterface Props {\n  person: Person,\n  selectedPersonId: string,\n}\n\nexport const PersonRow: React.FC<Props> = ({ person, selectedPersonId }) => {\n  return (\n    <tr\n      data-cy=\"person\"\n      className={\n        classNames({\n          'has-background-warning': selectedPersonId === person.slug,\n        })\n      }\n    >\n      <td>\n        <PersonLink person={person} />\n      </td>\n\n      <td>{person.sex}</td>\n      <td>{person.born}</td>\n      <td>{person.died}</td>\n      <td>\n        {person.mother\n          ? (\n            <PersonLink person={person.mother} />\n          )\n          : (\n            person.motherName || EMPTY\n          )}\n      </td>\n      <td>\n        {person.father\n          ? (\n            <PersonLink person={person.father} />\n          )\n          : (\n            person.fatherName || EMPTY\n          )}\n      </td>\n    </tr>\n  );\n};\n","export enum SortParam {\n  NoSort = '',\n  Name = 'name',\n  Born = 'born',\n  Died = 'died',\n  Sex = 'sex',\n}\n","export type SearchParams = {\n  [key: string]: string | string[] | null,\n};\n\n/**\n * This function prepares a correct search string\n * from a given currentParams and paramsToUpdate.\n */\nexport function getSearchWith(\n  currentParams: URLSearchParams,\n  paramsToUpdate: SearchParams, // it's our custom type\n): string {\n  // copy currentParams by creating new object from a string\n  const newParams = new URLSearchParams(\n    currentParams.toString(),\n  );\n\n  // Here is the example of paramsToUpdate\n  // {\n  //   sex: 'm',                ['sex', 'm']\n  //   order: null,             ['order', null]\n  //   centuries: ['16', '19'], ['centuries', ['16', '19']]\n  // }\n  //\n  // - params with the `null` value are deleted;\n  // - string value is set to given param key;\n  // - array of strings adds several params with the same key;\n\n  Object.entries(paramsToUpdate)\n    .forEach(([key, value]) => {\n      if (value === null) {\n        newParams.delete(key);\n      } else if (Array.isArray(value)) {\n        // we delete the key to remove old values\n        newParams.delete(key);\n\n        value.forEach(part => {\n          newParams.append(key, part);\n        });\n      } else {\n        newParams.set(key, value);\n      }\n    });\n\n  // we return a string to use it inside links\n  return newParams.toString();\n}\n","import { Link, LinkProps, useSearchParams } from 'react-router-dom';\nimport { getSearchWith, SearchParams } from '../utils/searchHelper';\n\n/**\n * To replace the the standard `Link` we take all it props except for `to`\n * along with the custom `params` prop that we use for updating the search\n */\ntype Props = Omit<LinkProps, 'to'> & {\n  params: SearchParams,\n};\n\n/**\n * SearchLink updates the given `params` in the search keeping the `pathname`\n * and the other existing search params (see `getSearchWith`)\n */\nexport const SearchLink: React.FC<Props> = ({\n  children, // this is the content between the open and closing tags\n  params, // the params to be updated in the `search`\n  ...props // all usual Link props like `className`, `style` and `id`\n}) => {\n  const [searchParams] = useSearchParams();\n\n  return (\n    <Link\n      // to={{ search: getSearchWith(searchParams, { query: 'sdf' }) }}\n      // to={{ search: getSearchWith(searchParams, { query: null }) }}\n      // to={{ search: getSearchWith(searchParams, { centuries: ['16', '18'] }) }}\n      to={{\n        search: getSearchWith(searchParams, params),\n      }}\n      {...props} // copy all the other props\n    >\n      {children}\n    </Link>\n  );\n};\n","import classNames from 'classnames';\nimport { useSearchParams } from 'react-router-dom';\nimport { SortParam } from '../../types/SortParam';\nimport { SearchLink } from '../SearchLink';\n\ninterface Props {\n  sortType: SortParam,\n}\n\nexport const SortLink: React.FC<Props> = ({ sortType }) => {\n  const [searchParams] = useSearchParams();\n  const isReversed = searchParams.get('order') === 'desc';\n  const sortField = searchParams.get('sort') || SortParam.NoSort;\n\n  const isSortAsc = sortType === sortField && !isReversed;\n  const isSortDesc = sortType === sortField && isReversed;\n  const isUnsorted = sortField !== sortType;\n\n  const params = {\n    order: isSortAsc ? 'desc' : null,\n    sort: isSortDesc ? null : sortType,\n  };\n\n  return (\n    <SearchLink params={params}>\n      <span className=\"icon\">\n        <i\n          className={classNames(\n            'fas',\n            {\n              'fa-sort': isUnsorted,\n              'fa-sort-up': isSortAsc,\n              'fa-sort-down': isSortDesc,\n            },\n          )}\n        />\n      </span>\n    </SearchLink>\n  );\n};\n","import { useParams } from 'react-router-dom';\nimport { Person } from '../../types';\nimport { PersonRow } from './PersonRow';\nimport { SortLink } from '../SortLink/SortLink';\nimport { SortParam } from '../../types/SortParam';\n\ninterface Props {\n  people: Person[],\n}\n\nexport const PeopleTable: React.FC<Props> = ({ people }) => {\n  const { personId = '' } = useParams();\n\n  return (\n    <table\n      data-cy=\"peopleTable\"\n      className=\"table is-striped is-hoverable is-narrow is-fullwidth\"\n    >\n      <thead>\n        <tr>\n          <th>\n            <span className=\"is-flex is-flex-wrap-nowrap\">\n              Name\n              <SortLink sortType={SortParam.Name} />\n            </span>\n          </th>\n\n          <th>\n            <span className=\"is-flex is-flex-wrap-nowrap\">\n              Sex\n              <SortLink sortType={SortParam.Sex} />\n            </span>\n          </th>\n\n          <th>\n            <span className=\"is-flex is-flex-wrap-nowrap\">\n              Born\n              <SortLink sortType={SortParam.Born} />\n            </span>\n          </th>\n\n          <th>\n            <span className=\"is-flex is-flex-wrap-nowrap\">\n              Died\n              <SortLink sortType={SortParam.Died} />\n            </span>\n          </th>\n          <th>Mother</th>\n          <th>Father</th>\n        </tr>\n\n        <tbody>\n          {people.map((person) => (\n            <PersonRow\n              person={person}\n              selectedPersonId={personId}\n              key={person.slug}\n            />\n          ))}\n        </tbody>\n      </thead>\n    </table>\n  );\n};\n","export enum SearchParam {\n  Sex = 'sex',\n  Query = 'query',\n  Centuries = 'centuries',\n  Sort = 'sort',\n  Order = 'order',\n}\n","import { useEffect, useState } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport classNames from 'classnames';\nimport { SearchParam } from '../types/SearchParam';\nimport { CENTURY_MAP, FEMALE, MALE } from '../utils/consts';\nimport { SearchLink } from './SearchLink';\nimport { getSearchWith } from '../utils/searchHelper';\n\nexport const PeopleFilters = () => {\n  const [query, setQuery] = useState('');\n  const [searchParams, setSearchParams] = useSearchParams();\n  const sex = searchParams.get(SearchParam.Sex);\n  const centuries = searchParams.getAll(SearchParam.Centuries);\n\n  useEffect(() => {\n    setQuery(searchParams.get(SearchParam.Query) || '');\n  }, []);\n\n  const handleQueryChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setSearchParams(\n      getSearchWith(searchParams, {\n        query: event.target.value || null,\n      }),\n    );\n    setQuery(event.target.value);\n  };\n\n  return (\n    <nav className=\"panel\">\n      <p className=\"panel-heading\">Filters</p>\n\n      <p className=\"panel-tabs\" data-cy=\"SexFilter\">\n        <SearchLink\n          className={classNames(\n            { 'is-active': !sex },\n          )}\n          params={{ sex: null }}\n        >\n          All\n        </SearchLink>\n\n        <SearchLink\n          className={classNames(\n            { 'is-active': sex === MALE },\n          )}\n          params={{ sex: MALE }}\n        >\n          Male\n        </SearchLink>\n\n        <SearchLink\n          className={classNames(\n            { 'is-active': sex === FEMALE },\n          )}\n          params={{ sex: FEMALE }}\n        >\n          Female\n        </SearchLink>\n      </p>\n\n      <div className=\"panel-block\">\n        <p className=\"control has-icons-left\">\n          <input\n            data-cy=\"NameFilter\"\n            type=\"search\"\n            className=\"input\"\n            placeholder=\"Search\"\n            value={query}\n            defaultValue={searchParams.get(SearchParam.Query) || ''}\n            onChange={(event) => handleQueryChange(event)}\n          />\n\n          <span className=\"icon is-left\">\n            <i className=\"fas fa-search\" aria-hidden=\"true\" />\n          </span>\n        </p>\n      </div>\n\n      <div className=\"panel-block\">\n        <div className=\"level is-flex-grow-1 is-mobile\" data-cy=\"CenturyFilter\">\n          <div className=\"level-left\">\n            {CENTURY_MAP.map((century: number) => {\n              const currentCentury = century.toString();\n              const isCenturyIncluded = centuries.includes(currentCentury);\n              const updatedCenturies = isCenturyIncluded\n                ? centuries.filter(cent => cent !== currentCentury)\n                : [...centuries, currentCentury];\n\n              return (\n                <SearchLink\n                  key={century}\n                  data-cy=\"century\"\n                  className={classNames(\n                    'button',\n                    'mr-1',\n                    { 'is-info': isCenturyIncluded },\n                  )}\n                  params={{\n                    centuries: updatedCenturies,\n                  }}\n                >\n                  {century}\n                </SearchLink>\n              );\n            })}\n          </div>\n\n          <div className=\"level-right ml-4\">\n            <SearchLink\n              data-cy=\"centuryALL\"\n              className=\"button is-success is-outlined\"\n              params={{ centuries: null }}\n            >\n              All\n            </SearchLink>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"panel-block\">\n        <SearchLink\n          className=\"button is-link is-outlined is-fullwidth\"\n          params={{ sex: null, query: null, centuries: null }}\n          onClick={() => setQuery('')}\n        >\n          Reset all filters\n        </SearchLink>\n      </div>\n    </nav>\n  );\n};\n","import { useEffect, useState } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport { Person } from '../../../types';\nimport { getPeople } from '../../../api';\nimport { Loader } from '../../Loader';\nimport { PeopleTable } from '../../PeopleTable/PeopleTable';\nimport { PeopleFilters } from '../../PeopleFilters';\nimport { SearchParam } from '../../../types/SearchParam';\nimport { SortParam } from '../../../types/SortParam';\n\nfunction preparePeople(people: Person[]) {\n  return people.map(person => {\n    return {\n      ...person,\n      mother: people.find(mother => mother.name === person.motherName),\n      father: people.find(father => father.name === person.fatherName),\n    };\n  });\n}\n\nfunction filterPeople(\n  people: Person[],\n  sex: string | null,\n  query: string | null,\n  centuries: string[],\n  sortField: string | null,\n  order: string | null,\n) {\n  let filteredPeople = [...people];\n\n  if (sex) {\n    filteredPeople = filteredPeople.filter(person => person.sex === sex);\n  }\n\n  if (centuries.length) {\n    filteredPeople = filteredPeople.filter((person) => {\n      const personCentury = Math.ceil(person.born / 100).toString(10);\n\n      return centuries.includes(personCentury);\n    });\n  }\n\n  if (query) {\n    const lowerQuery = query.toLowerCase();\n\n    filteredPeople = filteredPeople.filter(person => {\n      return [person.name, person.motherName || '', person.fatherName || '']\n        .join(' ')\n        .toLowerCase()\n        .includes(lowerQuery);\n    });\n  }\n\n  if (sortField) {\n    switch (sortField) {\n      case SortParam.Name:\n        filteredPeople.sort((person1, person2) => {\n          return person1.name.localeCompare(person2.name);\n        });\n\n        break;\n      case SortParam.Sex:\n        filteredPeople.sort((person1, person2) => {\n          return person1.sex.localeCompare(person2.sex);\n        });\n\n        break;\n      case SortParam.Born:\n        filteredPeople.sort((person1, person2) => {\n          return person1.born - person2.born;\n        });\n\n        break;\n      case SortParam.Died:\n        filteredPeople.sort((person1, person2) => {\n          return person1.died - person2.died;\n        });\n\n        break;\n      case SortParam.NoSort:\n      default:\n        break;\n    }\n\n    if (order === 'desc') {\n      filteredPeople.reverse();\n    }\n  }\n\n  return filteredPeople;\n}\n\nexport const PeoplePage = () => {\n  const [people, setPeople] = useState<Person[]>([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isError, setIsError] = useState(false);\n  const [searchParams] = useSearchParams();\n\n  const sex = searchParams.get(SearchParam.Sex);\n  const query = searchParams.get(SearchParam.Query);\n  const centuries = searchParams.getAll(SearchParam.Centuries);\n  const sortField = searchParams.get(SearchParam.Sort);\n  const order = searchParams.get(SearchParam.Order);\n\n  useEffect(() => {\n    setIsLoading(true);\n\n    getPeople()\n      .then(peopleFromServer => {\n        setPeople(preparePeople(peopleFromServer));\n      })\n      .catch(() => {\n        setIsError(true);\n      })\n      .finally(() => {\n        setIsLoading(false);\n      });\n  }, []);\n\n  const visiblePeople = filterPeople(\n    people,\n    sex,\n    query,\n    centuries,\n    sortField,\n    order,\n  );\n\n  const isDisplayError = isError && !isLoading;\n  const isNoPeopleFromServer = !people.length && !isLoading && !isError;\n  const isPeopleFromServer = !!people.length && !isError;\n\n  return (\n    <>\n      <h1 className=\"title\">People Page</h1>\n\n      <div className=\"block\">\n        <div className=\"columns is-desktop is-flex-direction-row-reverse\">\n          {!isLoading && (\n            <div className=\"column is-7-tablet is-narrow-desktop\">\n              <PeopleFilters />\n            </div>\n          )}\n\n          <div className=\"column\">\n            <div className=\"box table-container\">\n              {isLoading && (\n                <Loader />\n              )}\n\n              {isDisplayError && (\n                <p data-cy=\"peopleLoadingError\" className=\"has-text-danger\">\n                  Something went wrong\n                </p>\n              )}\n\n              {isNoPeopleFromServer && (\n                <p data-cy=\"noPeopleMessage\">\n                  There are no people on the server\n                </p>\n              )}\n\n              {isPeopleFromServer && (\n                <PeopleTable people={visiblePeople} />\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n","import { NavLink } from 'react-router-dom';\nimport classNames from 'classnames';\n\nexport const Navbar = () => {\n  return (\n    <nav\n      data-cy=\"nav\"\n      className=\"navbar is-fixed-top has-shadow\"\n      role=\"navigation\"\n      aria-label=\"main navigation\"\n    >\n      <div className=\"container\">\n        <div className=\"navbar-brand\">\n          <NavLink\n            className={({ isActive }: { isActive: boolean }) => classNames(\n              'navbar-item',\n              { 'has-background-grey-lighter': isActive },\n            )}\n            to=\"/\"\n          >\n            Home\n          </NavLink>\n\n          <NavLink\n            className={({ isActive }: { isActive: boolean }) => classNames(\n              'navbar-item',\n              { 'has-background-grey-lighter': isActive },\n            )}\n            to=\"/people\"\n          >\n            People\n          </NavLink>\n        </div>\n      </div>\n    </nav>\n  );\n};\n","export const HomePage = () => (\n  <h1 className=\"title\">Home Page</h1>\n);\n","export const NotFoundPage = () => (\n  <h1 className=\"title\">Page not found</h1>\n);\n","import { Navigate, Route, Routes } from 'react-router-dom';\nimport { PeoplePage } from './components/pages/PeoplePage/PeoplePage';\nimport { Navbar } from './components/Navbar';\n\nimport './App.scss';\nimport { HomePage } from './components/pages/HomePage/HomePage';\nimport { NotFoundPage } from './components/pages/NotFoundPage/NotFoundPage';\n\nexport const App = () => {\n  return (\n    <div data-cy=\"app\">\n      <Navbar />\n\n      <Routes>\n        <Route path=\"/\" element={<HomePage />} />\n        <Route path=\"home\" element={<Navigate to=\"/\" replace />} />\n        <Route path=\"people\" element={<PeoplePage />}>\n          <Route path=\":personId\" />\n        </Route>\n        <Route path=\"*\" element={<NotFoundPage />} />\n      </Routes>\n    </div>\n  );\n};\n","import { createRoot } from 'react-dom/client';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { App } from './App';\n\ncreateRoot(document.getElementById('root') as HTMLDivElement)\n  .render(\n    <Router>\n      <App />\n    </Router>,\n  );\n"],"sourceRoot":""}